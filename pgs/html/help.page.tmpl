{{template "base" .}}

{{define "title"}}help -- {{.Site.Domain}}{{end}}

{{define "meta"}}
<meta name="description" content="questions and answers" />
{{end}}

{{define "attrs"}}{{end}}

{{define "body"}}
<header>
  <h1 class="text-2xl">Need help?</h1>
  <p>Here are some common questions on using this platform that we would like to answer.</p>
</header>
<main>
  <section id="permission-denied">
    <h2 class="text-xl">
      <a href="#permission-denied" rel="nofollow noopener">#</a>
      I get a permission denied when trying to SSH
    </h2>
    <p>
      Unfortunately SHA-2 RSA keys are <strong>not</strong> currently supported.
    </p>
    <p>
      Unfortunately, due to a shortcoming in Go’s x/crypto/ssh package, we
      not currently support access via new SSH RSA keys: only the old SHA-1 ones will work.
      Until we sort this out you’ll either need an SHA-1 RSA key or a key with another
      algorithm, e.g. Ed25519. Not sure what type of keys you have? You can check with the
      following:
    </p>
    <pre>$ find ~/.ssh/id_*.pub -exec ssh-keygen -l -f {} \;</pre>
    <p>If you’re curious about the inner workings of this problem have a look at:</p>
    <ul>
      <li><a href="https://github.com/golang/go/issues/37278">golang/go#37278</a></li>
      <li><a href="https://go-review.googlesource.com/c/crypto/+/220037">go-review</a></li>
      <li><a href="https://github.com/golang/crypto/pull/197">golang/crypto#197</a></li>
    </ul>
  </section>

  <section id="ssh-key">
    <h2 class="text-xl">
      <a href="#ssh-key" rel="nofollow noopener">#</a>
      Generating a new SSH key
    </h2>
    <p>
      <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Github reference</a>
    </p>
    <pre>ssh-keygen -t ed25519 -C "your_email@example.com"</pre>
    <ol>
      <li>When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.</li>
      <li>At the prompt, type a secure passphrase.</li>
    </ol>
  </section>

  <section id="cli-commands">
    <h2 class="text-xl">
      <a href="#cli-commands" rel="nofollow noopener">#</a>
      CLI Commands
    </h2>
    <p>
      Our CLI commands are currently in active development so the list of available commands are changing.
    </p>
    <p>The best way to learn about all the commands we support is via an SSH command:</p>
    <pre>ssh {{.Site.Domain}} help</pre>
    <p>
      Having said that, we do want to demonstrate the power of {{.Site.Domain}} by discussing design goals.
      All of our SSH commands are safe-by-default.  Meaning, they never mutate server state by default.
      This provides users an opportunity to experiment with our commands to see how they work.  In order to
      actually trigger server mutations, every command must be appended with <code>--write</code>.
    </p>
    <p>
      Further, we want to make sure users are able to manage their static sites exclusively from SSH commands.
      Below is list of features we support via SSH commands:
    </p>
    <ul>
      <li>Storage usage stats: <code>ssh <user>@{{.Site.Domain}} stats</code></li>
      <li>List all projects (and their links): <code>ssh <user>@{{.Site.Domain}} ls</code></li>
      <li>List all project dependencies: <code>ssh <user>@{{.Site.Domain}} depends project-x</code></li>
      <li>Link a project: <code>ssh <user>@{{.Site.Domain}} link project-x project-y</code></li>
      <li>Unlink a project: <code>ssh <user>@{{.Site.Domain}} unlink project-x</code></li>
      <li>Delete a project (and all assets): <code>ssh <user>@{{.Site.Domain}} rm project-x</code></li>
      <li>Delete all projects matching a prefix (except projects that have linked projects): <code>ssh <user>@{{.Site.Domain}} prune prefix</code></li>
    </ul>
  </section>

  <section id="file-types">
    <h2 class="text-xl">
      <a href="#file-types" rel="nofollow noopener">#</a>
      What file types are supported?
    </h2>
    <ul>
      <li>html</li>
      <li>htm</li>
      <li>css</li>
      <li>js</li>
      <li>jpg</li>
      <li>png</li>
      <li>gif</li>
      <li>webp</li>
      <li>svg</li>
      <li>ico</li>
      <li>pdf</li>
      <li>json</li>
      <li>txt</li>
      <li>otf</li>
      <li>ttf</li>
      <li>woff</li>
      <li>woff2</li>
      <li>md</li>
      <li>rss</li>
      <li>xml</li>
      <li>atom</li>
      <li>map</li>
      <li>webmanifest</li>
    </ul>
  </section>

  <section id="redirects">
    <h2 class="text-xl">
      <a href="#redirects" rel="nofollow noopener">#</a>
      User-defined Redirects
    </h2>
    <p>
      We support custom redirects via a special file <code>_redirects</code>.
      Read more about it at <a href="https://docs.netlify.com/routing/redirects">netflify</a>
    </p>
  </section>

  <section id="spa">
    <h2 class="text-xl">
      <a href="#spa" rel="nofollow noopener">#</a>
      Single-Page Applications (SPAs)
    </h2>
    <p>
      pgs supports SPAs!  Upload a <code>_redirects</code> file your project:
    </p>
    <pre>/*  /index.html  200</pre>

    <p>
      Note that the Content Security Policy (CSP) for pages in the pgs.sh domain
      prohibits javascript from connecting to other origins.
      Pages served by custom domains do not have this restriction.
    </p>

  </section>

  <section id="custom-domain">
    <h2 class="text-xl">
      <a href="#custom-domain" rel="nofollow noopener">#</a>
      Setup a custom domain
    </h2>
    <p>
      A blog can be accessed from a custom domain.
      HTTPS will be automatically enabled and a certificate will be retrieved
      from <a href="https://letsencrypt.org/">Let's Encrypt</a>. In order for this to work,
      2 DNS records need to be created:
    </p>

    <p>CNAME for the domain to pgs (subdomains or DNS hosting with CNAME flattening) or A record</p>
    <pre>CNAME subdomain.yourcustomdomain.com -> {{.Site.Domain}}</pre>
    <p>Resulting in:</p>
    <pre>subdomain.yourcustomdomain.com.         300     IN      CNAME   {{.Site.Domain}}.</pre>
    <p>And a TXT record to tell Prose what project is hosted on that domain at the subdomain entry _pgs</p>
    <pre>TXT _pgs.subdomain.yourcustomdomain.com -> username-myproject</pre>
    <p>E.g. for user 'erock' and project 'kittens' the result would be:</p>
    <p>Resulting in:</p>
    <pre>_pgs.subdomain.yourcustomdomain.com.         300     IN      TXT     "erock-kittens"</pre>
  </section>
</main>
{{template "marketing-footer" .}}
{{end}}
