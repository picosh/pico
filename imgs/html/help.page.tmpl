{{template "base" .}}

{{define "title"}}help -- {{.Site.Domain}}{{end}}

{{define "meta"}}
<meta name="description" content="questions and answers" />
{{end}}

{{define "attrs"}}{{end}}

{{define "body"}}
<header>
    <h1 class="text-2xl">Need help?</h1>
    <p>Here are some common questions on using this platform that we would like to answer.</p>
</header>
<main>
    <section id="permission-denied">
        <h2 class="text-xl">
            <a href="#permission-denied" rel="nofollow noopener">#</a>
            I get a permission denied when trying to SSH
        </h2>
        <p>
            Unfortunately SHA-2 RSA keys are <strong>not</strong> currently supported.
        </p>
        <p>
            Unfortunately, due to a shortcoming in Go’s x/crypto/ssh package, we
            not currently support access via new SSH RSA keys: only the old SHA-1 ones will work.
            Until we sort this out you’ll either need an SHA-1 RSA key or a key with another
            algorithm, e.g. Ed25519. Not sure what type of keys you have? You can check with the
            following:
        </p>
        <pre>$ find ~/.ssh/id_*.pub -exec ssh-keygen -l -f {} \;</pre>
        <p>If you’re curious about the inner workings of this problem have a look at:</p>
        <ul>
            <li><a href="https://github.com/golang/go/issues/37278">golang/go#37278</a></li>
            <li><a href="https://go-review.googlesource.com/c/crypto/+/220037">go-review</a></li>
            <li><a href="https://github.com/golang/crypto/pull/197">golang/crypto#197</a></li>
        </ul>
    </section>

    <section id="blog-ssh-key">
        <h2 class="text-xl">
            <a href="#blog-ssh-key" rel="nofollow noopener">#</a>
            Generating a new SSH key
        </h2>
        <p>
            <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Github reference</a>
        </p>
        <pre>ssh-keygen -t ed25519 -C "your_email@example.com"</pre>
        <ol>
            <li>When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.</li>
            <li>At the prompt, type a secure passphrase.</li>
        </ol>
    </section>

    <section id="img-update">
        <h2 class="text-xl">
            <a href="#img-update" rel="nofollow noopener">#</a>
            How do I update a img?
        </h2>
        <p>
            Updating a img requires that you update the source document and then run the <code>scp</code>
            command again.  If the filename remains the same, then the img will be updated.
        </p>
    </section>

    <section id="img-delete">
        <h2 class="text-xl">
            <a href="#img-delete" rel="nofollow noopener">#</a>
            How do I delete a img?
        </h2>
        <p>
            Because <code>scp</code> does not natively support deleting files, I didn't want to bake
            that behavior into my ssh server.
        </p>

        <p>
            However, if a user wants to delete a img they can delete the contents of the file and
            then upload it to our server.  If the file contains 0 bytes, we will remove the img.
            For example, if you want to delete <code>delete.md</code> you could:
        </p>

        <pre>
cp /dev/null delete.md
scp ./delete.md {{.Site.Domain}}:/</pre>

        <p>
            Alternatively, you can go to <code>ssh {{.Site.Domain}}</code> and select "Manage img."
            Then you can highlight the img you want to delete and then press "X."  It will ask for
            confirmation before actually removing the img.
        </p>
    </section>

    <section id="custom-domain">
        <h2 class="text-xl">
            <a href="#custom-domain" rel="nofollow noopener">#</a>
            Setup a custom domain
        </h2>
        <p>
            A blog can be accessed from a custom domain.
            HTTPS will be automatically enabled and a certificate will be retrieved
            from <a href="https://letsencrypt.org/">Let's Encrypt</a>. In order for this to work,
            2 DNS records need to be created:
        </p>

        <p>CNAME for the domain to prose (subdomains or DNS hosting with CNAME flattening) or A record</p>
        <pre>CNAME subdomain.yourcustomdomain.com -> prose.sh</pre>
        <p>Resulting in:</p>
        <pre>subdomain.yourcustomdomain.com.         300     IN      CNAME   prose.sh.</pre>
        <p>And a TXT record to tell Prose what blog is hosted on that domain at the subdomain entry _prose</p>
        <pre>TXT _prose.subdomain.yourcustomdomain.com -> yourproseusername</pre>
        <p>Resulting in:</p>
        <pre>_prose.subdomain.yourcustomdomain.com.         300     IN      TXT     "hey"</pre>
    </section>
</main>
{{template "marketing-footer" .}}
{{end}}
